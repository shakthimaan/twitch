* 1. Tour of OCaml

Reference: https://ocaml.org/docs/tour-of-ocaml

Integer

#+BEGIN_SRC ocaml
50 ;;
50 * 50 ;;
#+END_SRC

Float

#+BEGIN_SRC ocaml
6.28 ;;
3.14 ;;
#+END_SRC

String

#+BEGIN_SRC ocaml
"This is really disco!" ;;
#+END_SRC

Boolean

#+BEGIN_SRC ocaml
true ;;
#+END_SRC

List of integers

#+BEGIN_SRC ocaml
let u = [1; 2; 3; 4] ;;
#+END_SRC

List of strings

#+BEGIN_SRC ocaml
["this"; "is"; "mambo"] ;;
#+END_SRC

Prepend to List

#+BEGIN_SRC ocaml
5 :: u ;;
#+END_SRC

If else construct

#+BEGIN_SRC ocaml
2 * if "hello" = "world" then 3 else 5 ;;
#+END_SRC

Let binding

#+BEGIN_SRC ocaml
let x = 50 ;;
#+END_SRC

Let scope

#+BEGIN_SRC ocaml
let y = 50 in y * y ;;
y ;;
#+END_SRC

Let in expression

#+BEGIN_SRC ocaml
let a = 1 in
let b = 2 in
  a + b ;;
#+END_SRC

Functions

#+BEGIN_SRC ocaml
let square x = x * x ;;

square 50 ;;

square ;;
#+END_SRC

Anonymous Functions

#+BEGIN_SRC ocaml
fun x -> x * x ;;
#+END_SRC

Partial Function Application

#+BEGIN_SRC ocaml
let cat a b = a ^ " " ^ b ;;

cat "ha" "ha" ;;

let cat_hi = cat "hi" ;;

cat_hi "friend" ;;
#+END_SRC

Higher order functions

#+BEGIN_SRC ocaml
List.map ;;

List.map (fun x -> x * x) ;;

List.map (fun x -> x * x) [0; 1; 2] ;;
#+END_SRC

Side Effects

#+BEGIN_SRC ocaml
print_endline ;;

print_endline "Hello" ;;
#+END_SRC

Recursive Functions

#+BEGIN_SRC ocaml
let rec range lo hi =
  if lo > hi then []
  else lo :: range (lo + 1) hi ;;

range 2 5 ;;
#+END_SRC

Type Conversion and Type-Inference

#+BEGIN_SRC ocaml
2.0 +. 2.0 ;;
#+END_SRC

#+BEGIN_SRC ocaml
1 + 2.5 ;;
#+END_SRC

#+BEGIN_SRC ocaml
1 +. 2.5 ;;
#+END_SRC

#+BEGIN_SRC ocaml
float_of_int 1 *. 2.5 ;;
#+END_SRC

Lists

#+BEGIN_SRC ocaml
[] ;;

[1; 2; 3] ;;

[false; false; true] ;;

[[1;2]; [3]; [4;5;6]] ;;
#+END_SRC

#+BEGIN_SRC ocaml
1 :: [2; 3; 4] ;;
#+END_SRC

#+BEGIN_SRC ocaml
let rec sum u =
  match u with
  | [] -> 0
  | x :: v -> x + sum v ;;

sum [1; 4; 3; 2; 5] ;;
#+END_SRC

Polymorphic Functions on Lists

#+BEGIN_SRC ocaml
let rec length u =
  match u with
  | [] -> 0
  | _ :: v -> 1 + length v ;;

length [1; 2; 3; 4] ;;

length ["cow"; "sheep"; "cat"] ;;

length [[]] ;;
#+END_SRC

Higher-Order Function

#+BEGIN_SRC ocaml
let square x = x * x ;;

let rec map f u =
  match u with
  | [] -> []
  | x :: u -> f x :: map f u ;;

map square [1; 2; 3; 4] ;;
#+END_SRC

Pattern Matching (...)

#+BEGIN_SRC ocaml
#show option ;;

let f opt = match opt with
  | None -> None
  | Some None -> None
  | Some (Some x) -> Some x ;;
#+END_SRC

#+BEGIN_SRC ocaml
let g x =
  if x = "foo" then 1
  else if x = "bar" then 2
  else if x = "baz" then 3
  else if x = "qux" then 4
  else 0 ;;

let g' x = match x with
  | "foo" -> 1
  | "bar" -> 2
  | "baz" -> 3
  | "qux" -> 4
  | _ -> 0 ;;
#+END_SRC

#+BEGIN_SRC ocaml
fun i -> match i with 0 -> 1 ;;
#+END_SRC

Pairs and Tuples

#+BEGIN_SRC ocaml
(1, "one", 'k') ;;

([], false) ;;

let snd p =
  match p with
  | (_, y) -> y ;;

snd (42, "apple") ;;
#+end_src

Enumerated Data Type

#+begin_src ocaml
type primary_colour = Red | Green | Blue ;;

[Red; Blue; Red] ;;
#+end_src

Union Data Type

#+BEGIN_SRC ocaml
type http_response =
  | Data of string
  | Error_code of int ;;

Data "<!DOCTYPE html>
<html lang=\"en\">
  <head>
    <meta charset=\"utf-8\">
    <title>Dummy</title>
  </head>
  <body>
    Dummy Page
  </body>
</html>";;

Error_code 404;;
#+END_SRC

Pattern matching on Variants

#+BEGIN_SRC ocaml
 type page_range =
    | All
    | Current
    | Range of int * int;;

let colour_to_rgb colour =
  match colour with
  | Red   -> (0xff,    0,    0)
  | Green -> (0,    0xff,    0)
  | Blue  -> (0,       0, 0xff) ;;

let http_status_code response = 
  match response with
  | Data _ -> 200
  | Error_code code -> code ;;

let is_printable page_count cur range =
  match range with 
  | All -> true 
  | Current -> 0 <= cur && cur < page_count
  | Range (lo, hi) -> 0 <= lo && lo <= hi && hi < page_count ;;
#+END_SRC

Records

#+BEGIN_SRC ocaml
type person = {
  first_name : string;
  surname : string ;
  age : int
} ;;

let gerard = {
  first_name = "Gerard" ;
  surname = "Huet" ;
  age = 76
} ;;

let s = gerard.surname ;;

let is_teenager person =
  match person with
  | { age = x; _ } -> 13 <= x && x <= 19 ;;

is_teenager gerard ;;
#+END_SRC

Exceptions

#+BEGIN_SRC ocaml
10 / 0 ;;

let id_42 n = if n <> 42 then raise (Failure "Sorry") else n ;;

id_42 42;;

id_42 5;;

try id_42 0 with Failure _ -> 0 ;;
#+END_SRC

Using Result Type

#+BEGIN_SRC ocaml
#show result ;;

let id_42_res n = if n <> 42 then Error "Sorry" else Ok n ;;

id_42_res 42 ;;

id_42_res 35 ;;

match id_42_res 0 with
  | Ok n -> n
  | Error _ -> 0 ;;
#+END_SRC

Working with Mutable State

#+BEGIN_SRC ocaml
let r = ref 0 ;;

!r ;;

r := 42 ;;

!r ;;
#+END_SRC

#+BEGIN_SRC ocaml
let text = ref "hello " ;;

print_string !text; text := "world!"; print_endline !text ;;
#+END_SRC

Modules and the Standard Library

#+BEGIN_SRC ocaml
#show Option ;;

Option.map ;;

Option.map (fun x -> x * x) ;;

Option.map (fun x -> x * x) None ;;

Option.map (fun x -> x * x) (Some 8) ;;

List.map ;;

List.map (fun x -> x * x );;
#+END_SRC

* 2. Values and Functions

Reference: https://ocaml.org/docs/values-and-functions

What is a a Value?

#+BEGIN_SRC ocaml
2 * 21 ;;

int_of_float ;; 

int_of_float (3.14159 *. 2.0) ;;

fun x -> x * x ;;

print_endline ;;

print_endline "Hello!" ;;
#+END_SRC

Global Definitions

#+BEGIN_SRC ocaml
let the_answer = 2 * 3 * 7 ;;
#+END_SRC

Local Definitions

#+BEGIN_SRC ocaml
let d = 2 * 3 in d * 7 ;;

d ;;

let d = 2 * 3 in
let e = d * 7 in
d * e ;;

d ;;

e ;;

let d =
  let e = 2 * 3 in
  e * 5 in
d * 7 ;;

d ;;

e ;;
#+END_SRC

Pattern Matching on Tuples

#+BEGIN_SRC ocaml
List.split ;;

let (x, y) = List.split [(1, 2); (3, 4); (5, 6); (7, 8)] ;;
#+END_SRC

Pattern Matching on Records

#+BEGIN_SRC ocaml
type name  = { first : string; last : string } ;;

let robin = { first = "Robin"; last = "Milner" } ;;

let { first; last } = robin ;;
#+END_SRC

Pattern Matching on Unit

#+BEGIN_SRC ocaml
let () = print_endline "ha ha" ;;
#+END_SRC

Pattern Matching on User-Defined Types

#+BEGIN_SRC ocaml
type live_person = int * name ;;

let age ((years, { first; last }) : live_person) = years ;;
#+END_SRC

Discarding Values using Pattern Matching

#+BEGIN_SRC ocaml
let (_, y) = List.split [(1, 2); (3, 4); (5, 6); (7, 8)] ;;
#+END_SRC

Scopes and Envirnoments

#+BEGIN_SRC ocaml
let twenty = 20 ;;

let ten = 10 in 2 * ten ;;

ten ;;

(1.0 +. sqrt 5.0) /. 2.0 ;;

let _ = (1.0 +. sqrt 5.0) /. 2.0 ;;
#+END_SRC

Inner Shadowing

#+BEGIN_SRC ocaml
let i = 21 ;;

let i = 7 in i * 2 ;;

i ;;
#+END_SRC

Same-Level Shadowing

#+BEGIN_SRC ocaml
let h = 2 * 3 ;;

let e = h * 7 ;;

let h = 7 ;;

e ;;
#+END_SRC

Applying Functions

#+BEGIN_SRC ocaml
max (21 * 2) (int_of_string "713") ;;

String.starts_with ~prefix:"state" "stateless" ;;
#+END_SRC

Application Operator

#+BEGIN_SRC ocaml
sqrt 9.0 ;; 

sqrt @@ 9.0 ;;
#+END_SRC

Pipe Operator

#+BEGIN_SRC ocaml
"81" |> int_of_string 
     |> float_of_int
     |> sqrt 
     |> int_of_float ;;
#+END_SRC

Anonymous Functions

#+BEGIN_SRC ocaml
fun x -> x ;;

fun x -> x * x ;;

fun s t -> s ^ " " ^ t ;;

function [] -> None | x :: _ -> Some x ;;

List.map (fun x -> x * x) [1; 2; 3; 4] ;;
#+END_SRC

Defining Global Functions

#+BEGIN_SRC ocaml
let f = fun x -> x * x ;;

let g x = x * x ;;
#+END_SRC

Defining Local Functions

#+BEGIN_SRC ocaml
let sq x = x * x in sq 7 * sq 7 ;;

sq ;;
#+END_SRC

Closures

#+BEGIN_SRC ocaml
let j = 2 * 3;;

let k x = x * j ;;

k 7 ;;

let j = 7 ;;

k 7 ;;

let m = j * 3 ;;

let max_42 = max 42 ;;
#+END_SRC

Recursive Functions

#+BEGIN_SRC ocaml
let rec fibo n =
  if n <= 1 then n else fibo (n - 1) + fibo (n - 2 ) ;;

let u = List.init 10 Fun.id ;;

List.map fibo u ;;
#+END_SRC

#+BEGIN_SRC ocaml
let rec fib_loop m n i =
  if i = 0 then m else fib_loop n (n + m) (i -1) ;;

let fib = fib_loop 0 1 ;;

List.init 10 Fun.id |> List.map fib ;;
#+END_SRC

Defining Functions with Multiple Parameters

#+BEGIN_SRC ocaml
let sweet_cat x y = x ^ " " ^ y ;;

sweet_cat "kitty" "cat" ;;
#+END_SRC

Anonymous Functions with Multiple Parameters

#+BEGIN_SRC ocaml
let sour_cat = fun x -> fun y -> x ^ " " ^ y ;;

sour_cat "kitty" "cat" ;;
#+END_SRC

Partial Application and Closures

#+BEGIN_SRC ocaml
let sour_kitty x = sour_cat "kitty" x ;;

let sweet_kitty = fun x -> sweet_cat "kitty" x ;;

sour_kitty "cat" ;;

sweet_kitty "cat" ;;
#+END_SRC

Types of Functions of Multiple Parameters

#+BEGIN_SRC ocaml
let dummy_cat : string -> (string -> string) = sweet_cat ;;

let bogus_cat : (string -> string) -> string = sweet_cat ;;
#+END_SRC

Tuples as Function Parameters 

#+BEGIN_SRC ocaml
("felix", 1920) ;;

let spicy_cat (x, y) = x ^ " " ^ y ;;

spicy_cat ("hello", "world") ;;
#+END_SRC

Currying and Uncurrying

#+BEGIN_SRC ocaml
let uncurried_cat (x, y) = sweet_cat x y ;;

let curried_cat x y = uncurried_cat (x, y) ;;
#+END_SRC

#+BEGIN_SRC ocaml
string_of_int ;;

print_endline ;;
#+END_SRC

What makes Functions different from other Values

#+BEGIN_SRC ocaml
sqrt ;;

pred ;;

succ ;;

pred = succ ;;
#+END_SRC

* 3. Basic Data Types and Pattern Matching

Reference: https://ocaml.org/docs/basic-data-types

Integers

#+BEGIN_SRC ocaml
42 ;;
#+END_SRC

Floats

#+BEGIN_SRC ocaml
let pi = 3.14159 ;;

let tau = 2.0 *. pi ;;

let tau 2 *. pi ;;

let tau = 2 8 pi ;;
#+END_SRC

Boolean

#+BEGIN_SRC ocaml
true ;;

false ;;

false < true ;;

3 * if "foo" = "bar" then 5 else 5 + 2 ;;

3 * match "foo" = "bar" with true -> 5 | false -> 5 + 2 ;;
#+END_SRC

Characters

#+BEGIN_SRC ocaml
'd' ;;  
#+END_SRC

Strings

#+BEGIN_SRC ocaml
"hello" ^ " " ^ "world!" ;;

"buenos dias".[4] ;;
#+END_SRC

Byte Sequences

#+BEGIN_SRC ocaml
String.to_bytes "hello" ;;
#+END_SRC

Arrays

#+BEGIN_SRC ocaml
[| 0; 1; 2; 3; 4; 5 |] ;;

[| 'x'; 'y'; 'z' |] ;;

[| "foo"; "bar"; "baz" |] ;;

[||] ;;

[| 'x'; 'y'; 'z' |].(2) ;;

let letter = [| 'v'; 'x'; 'y'; 'z'|] ;; 

letter.(2) <- 'F' ;;

letter ;;  
#+END_SRC

Lists

#+BEGIN_SRC ocaml
[0; 1; 2; 3; 4; 5 ] ;;

[ 'x'; 'y'; 'z'] ;;

[ "foo"; "bar"; "baz"] ;;

3 :: [] ;;

2 :: 3 :: [] ;;

1 :: 2 :: 3 :: [] ;;

match [1; 2; 3] with
  | x :: u -> x
  | [] -> raise Exit ;;

match [1; 2; 3] with
  | x :: y :: u -> y
  | x :: u -> x
  | [] -> raise Exit ;;  
#+END_SRC

Options

#+BEGIN_SRC ocaml
None ;;

Some 42 ;;

Some "hello" ;;

match Some 42 with None -> raise Exit | Some x -> x ;;
#+END_SRC

Results

#+BEGIN_SRC ocaml
Ok 42 ;;

Error "Sorry" ;;
#+END_SRC

Tuples

#+BEGIN_SRC ocaml
(3, 'K') ;;

fst (3, 'g') ;;

snd (3, 'g') ;;

let f x = match x with (h, i, j, k) -> j ;;

f (42, 'h', true, 2.0) ;;
#+END_SRC

Functions

#+BEGIN_SRC ocaml
fun x -> x * x ;;

fun x -> x * x ;;

(fun x -> x * x) 9 ;;

fun x -> x ;;

(fun x -> x) 42 ;;

(fun x -> x) "This is really disco!" ;;

#+END_SRC

#+BEGIN_SRC ocaml
let f = fun x -> x * x ;;

f 9 ;;

let g x = x * x ;;

g 9 ;;

raise ;; 

fun s r -> s ^ " " ^ r ;;

let mean s r = (s + r) / 2 ;;
#+END_SRC

Unit

#+BEGIN_SRC ocaml
read_line ;;

print_endline ;;
#+END_SRC

User-Defined Types

Use the "type" keyword for defining either:

1. Variant
2. Record
3. Aliases

Enumerated Data Types

#+BEGIN_SRC ocaml
type character_class =
  | Barbarian
  | Bard
  | Cleric
  | Fighter
  | Monk
  | Paladin
  | Ranger
  | Rogue
  | Sorcerer
  | Wizard ;;
#+END_SRC

#+BEGIN_SRC ocaml
type rectitude = Evil | R_Neutral | Good ;;

type firmness = Chaotic | F_Neutral | Lawful ;;

let rectitude_to_french = function
  | Evil -> "Mauvais"
  | R_Neutral -> "Neutre"
  | Good -> "Bon" ;;
#+END_SRC

Represent weekdays and you can do ordering on the values:

#+BEGIN_SRC ocaml
type weekday =
  | Monday
  | Tuesday
  | Wednesday
  | Thursday
  | Friday ;;

type weekend =
  | Saturday
  | Sunday ;;

Monday < Tuesday ;;

Thursday < Wednesday ;;
#+END_SRC

Constructors with Data

#+BEGIN_SRC ocaml
type commit =
  | Hash of string
  | Tag of string
  | Branch of string
  | Head
  | Fetch_head
  | Orig_head
  | Merge_head ;;

Hash "991f6710bad011868d46edb5d609ce251d1d1854";;
#+END_SRC

Using pattern matching to convert a commit to a string:

#+BEGIN_SRC ocaml
let commit_to_string = function
  | Hash sha -> sha
  | Tag name -> name
  | Branch name -> name
  | Head -> "HEAD"
  | Fetch_head -> "FETCH_HEAD"
  | Orig_head -> "ORIG_HEAD"
  | Merge_head -> "MERGE_HEAD" ;;

let commit_to_string' x = match x with
  | Hash sha -> sha
  | Tag name -> name
  | Branch name -> name
  | Head -> "HEAD"
  | Fetch_head -> "FETCH_HEAD"
  | Orig_head -> "ORIG_HEAD"
  | Merge_head -> "MERGE_HEAD" ;;

commit_to_string' (Hash "991f6710bad011868d46edb5d609ce251d1d1854");;
#+END_SRC

Wrapping product types with parenthesis makes them a single parameter:

#+BEGIN_SRC ocaml
type t =
  | C1 of int * bool
  | C2 of (int * bool) ;;

let p = (4, false) ;;

C1 p ;;

C2 p ;;
#+END_SRC

C1 has two parameters (int and bool).
C2 has one parameter of type int * bool.

Recursive Variants

A definition referring to itself is recursive.

#+BEGIN_SRC ocaml
type json =
  | Null
  | Bool of bool
  | Int of int
  | Float of float
  | String of string
  | Array of json list
  | Object of (string * json) list ;;
#+END_SRC

Both Array and Object contain values of json.

Functions with pattern matching on recursive variants are often
recursive functions.

#+BEGIN_SRC ocaml
let rec has_field name = function
  | Array u ->
    List.fold_left (fun b obj -> b || has_field name obj) false u
  | Object u ->
      List.fold_left (fun b (key, obj) -> b || key = name || has_field name obj) false u
  | _ -> false ;;
#+END_SRC

Polymorphic Data Types

The Some constructor of option is polymorphic as it can be Some 42 or
Some "hola".

#+BEGIN_SRC ocaml
#show option ;;

#show list ;;
#+END_SRC

bool and unit are regular variants:

#+BEGIN_SRC ocaml
#show unit ;;

#show bool;;
#+END_SRC

Product types also behave as variant types:

#+BEGIN_SRC ocaml
type ('a, 'b) pair = Pair of 'a * 'b ;;

Pair (42, true) ;;
#+END_SRC

User-Defined Polymorphic

A binary tree:

#+BEGIN_SRC ocaml
type 'a tree =
  | Leaf
  | Node of 'a * 'a tree * 'a tree ;;

     1
   /   \
  2     3

Node (1, Node(2, Leaf, Leaf), Node(3, Leaf, Leaf)) ;;
#+END_SRC

#+BEGIN_SRC ocaml
let rec sum = function
  | Leaf -> 0
  | Node (x, left, right) -> x + sum left + sum right ;;

sum (Node (1, Node(2, Leaf, Leaf), Node(3, Leaf, Leaf))) ;;
#+END_SRC

#+BEGIN_SRC ocaml
let rec map f = function
  | Leaf -> Leaf
  | Node (x, left, right) -> Node (f x, map f left, map f right) ;;

map (fun x -> x * x) (Node (1, Node (2, Leaf, Leaf), Node (3, Leaf, Leaf))) ;;
#+END_SRC

Records

#+BEGIN_SRC ocaml
type character = {
  name : string;
  level : int;
  race : string;
  class_type : character_class ;
  alignment : firmness * rectitude ;
  armor_class : int ;
} ;;

let ghorghor_bey = {
  name = "Ghorghor Bey" ;
  level = 17 ;
  race = "half-ogre" ;
  class_type = Fighter;
  alignment = (Chaotic, R_Neutral);
  armor_class = -8 ;
} ;;

ghorghor_bey.alignment ;;

ghorghor_bey.class_type ;;

ghorghor_bey.level ;;
#+END_SRC

To create new record with some values changed:

#+BEGIN_SRC ocaml
let togrev = { ghorghor_bey with name = "Togrev"; level = 20; armor_class = -6 } ;;
#+END_SRC

Pattern match on records:

#+BEGIN_SRC ocaml
match ghorghor_bey with { level; _ } -> level ;;
#+END_SRC

Type Aliases

Any type can be given a name:

#+BEGIN_SRC ocaml
type latitude_longitude = float * float ;;
#+END_SRC

A complete example: Mathematical Expressions

To symbolically output:
n * (x + y) = n * x + n * y.

#+BEGIN_SRC ocaml
type expr =
  | Plus of expr * expr
  | Minus of expr * expr
  | Times of expr * expr
  | Divide of expr * expr
  | Var of string ;;

let e = Times (Var "n", Plus (Var "x", Var "y")) ;;

let rec to_string = function
  | Plus (e1, e2) -> "(" ^ to_string e1 ^ " + " ^ to_string e2 ^ ")"
  | Minus (e1, e2) -> "(" ^ to_string e1 ^ " - " ^ to_string e2 ^ ")"
  | Times (e1, e2) -> "(" ^ to_string e1 ^ " * " ^ to_string e2 ^ ")"
  | Divide (e1, e2) -> "(" ^ to_string e1 ^ " / " ^ to_string e2 ^ ")"
  | Var v -> v ;;

let rec distrib = function
  | Times (e1, Plus (e2, e3)) ->
    Plus (Times (distrib e1, distrib e2),
          Times (distrib e1, distrib e3))
  | Times (Plus (e1, e2), e3) ->
    Plus (Times (distrib e1, distrib e3),
          Times (distrib e2, distrib e3))
  | Plus (e1, e2) -> Plus (distrib e1, distrib e2)
  | Minus (e1, e2) -> Minus (distrib e1, distrib e2)
  | Times (e1, e2) -> Times (distrib e1, distrib e2)
  | Divide (e1, e2) -> Divide (distrib e1, distrib e2)
  | Var v -> Var v;;

e |> distrib |> to_string |> print_endline ;;
#+END_SRC

The reverse operation of factoring out the common subexpressions:

n * x + n * y = n * (x + y).

#+BEGIN_SRC ocaml

let top_factorise = function
  | Plus (Times (e1, e2), Times (e3, e4)) when e1 = e3 ->
      Times (e1, Plus (e2, e4))
  | Plus (Times (e1, e2), Times (e3, e4)) when e2 = e4 ->
      Times (Plus (e1, e3), e4)
  | e -> e ;;

top_factorise (Plus (Times (Var "n", Var "x"),
                     Times (Var "n", Var "y"))) ;;
#+END_SRC

* 4. Lists

Reference: https://ocaml.org/docs/lists

All elements of a list must be of the same type

#+BEGIN_SRC ocaml
[1; 2; 3] ;;
#+END_SRC

List has a head and tail.

#+BEGIN_SRC ocaml
[] ;;

[false; true; false] ;;

[1; 2; 3] ;;

[[1; 2]; [3; 4]; [5; 6]] ;;
#+END_SRC

The :: or cons operator adds element to the front of the list.

#+BEGIN_SRC ocaml
1 :: [2; 3] ;;
#+END_SRC

The @ operator combines two lists:

#+BEGIN_SRC ocaml
[1] @ [2; 3] ;;
#+END_SRC

** Functions on Lists

Using functions to operate on pattern matching with lists:

#+BEGIN_SRC ocaml
let rec total l =
  match l with
  | [] -> 0
  | h :: t -> h + total t ;;
#+END_SRC

A function to find the length of a list:

#+BEGIN_SRC ocaml
let rec length l =
    match l with
    | [] -> 0
    | _ :: t -> 1 + length t;;

length [1; 2; 3] ;;

length ["cow"; "sheep"; "cat"] ;;

length [[]] ;;
#+END_SRC

In the pattern _ :: t, _ is not inspected as its type is not relevant.

This is a polymorphic function.

A version with the @ operator for append:

#+BEGIN_SRC ocaml
let rec append a b =
  match a with
  | [] -> b
  | h :: t -> h :: append t b;;
#+END_SRC

** Higher Order Functions on Lists

A map example:

#+BEGIN_SRC ocaml
let rec map f l =
    match l with
    | [] -> []
    | h :: t -> f h :: map f t;;
#+END_SRC

#+BEGIN_SRC ocaml
map (fun x -> x * 2) [1; 2; 3];;

map total [[1; 2]; [3; 4]; [5; 6]];;
#+END_SRC

** The Standard Library List Module

*** Maps and Iterators

A map variant for two lists:

#+BEGIN_SRC ocaml
List.map2 ( + ) [1; 2; 3] [4; 5; 6];;
#+END_SRC

#+BEGIN_SRC ocaml
List.iter ;;

List.iter print_endline ["frank"; "james"; "mary"];;
#+END_SRC

#+BEGIN_SRC ocaml
List.iter2 ;;

List.iter2
    (fun a b -> print_endline (a ^ " " ^ b))
    ["frank"; "james"; "mary"]
    ["carter"; "lee"; "jones"];;
#+END_SRC

Notice that map2 and iter2 will fail if the lists are of unequal length:

#+BEGIN_SRC ocaml
List.map2 ( + ) [1; 2; 3] [4; 5];;
#+END_SRC

*** List Scanning

Use function mem to check if an element is a member of a list.

#+BEGIN_SRC ocaml
List.mem ;;

List.mem "frank" ["james"; "frank"; "mary"];;

List.mem [] [[1; 2]; [3]; []; [5]];;
#+END_SRC

To see if all elements are even in a list, you can go over each
element of the list, keeping a boolean check, or use mem:

#+BEGIN_SRC ocaml
let all =
    not (List.mem false (List.map (fun x -> x mod 2 = 0) [2; 4; 6; 8]));;

let any =
    List.mem true (List.map (fun x -> x mod 2 = 0) [1; 2; 3]);;

#+END_SRC

Instead use the standard library useful functions for_all and exists:

#+BEGIN_SRC ocaml
List.for_all (fun x -> x mod 2 = 0) [2; 4; 6; 8];;

List.exists (fun x -> x mod 2 = 0) [1; 2; 3];;
#+END_SRC

The standard library has evolved into its present state with pieces of
frequently-used code turned into useful general functions.

*** List Searching

Find returns the first element of a list matching a given predicate.

#+BEGIN_SRC ocaml
List.find (fun x -> x mod 2 = 0) [1; 2; 3; 4; 5];;

List.find (fun x -> x mod 2 = 0) [1; 3; 5];;
#+END_SRC

The filter function again takes a predicate and tests it against each element in the list.

#+BEGIN_SRC ocaml
List.filter (fun x -> x mod 2 = 0) [1; 2; 3; 4; 5];;
#+END_SRC

Use partition to return a pair of list:

#+BEGIN_SRC ocaml
List.partition (fun x -> x mod 2 = 0) [1; 2; 3; 4; 5];;
#+END_SRC

*** Association Lists

For dictionaries, we can use Map or Hashtbl modules.

For smaller list of pairs, List has useful functions.

#+BEGIN_SRC ocaml
List.assoc ;;

List.assoc 4 [(3, "three"); (1, "one"); (4, "four")] ;;

List.mem_assoc ;;

List.mem_assoc 4 [(3, "three"); (1, "one"); (4, "four")] ;;
#+END_SRC

You can make a list of pairs from a pair of lists and vice versa:

#+BEGIN_SRC ocaml
List.split ;;

List.split [(3, "three"); (1, "one"); (4, "four")] ;; 

List.combine ;;

List.combine [3; 1; 4] ["three"; "one"; "four"];;
#+END_SRC

*** Sorting List

The compare function can compare any two values of like type:

#+BEGIN_SRC ocaml
compare ;;

compare 3 5 ;;

compare 5 3 ;;

compare 5 5 ;;
#+END_SRC

Use List.sort with a comparison function.

#+BEGIN_SRC ocaml
List.sort ;;

List.sort compare [1; 4; 6; 4; 1] ;;
#+END_SRC

#+BEGIN_SRC ocaml
Fun.flip ;;

List.sort compare ["Reynolds"; "Smith"; "Barnes"];;

List.sort (Fun.flip compare) [1; 4; 6; 4; 1];;

List.sort compare [(1, 3); (1, 2); (2, 3); (2, 2)];;

List.sort
    (fun a b -> compare (fst a) (fst b))
    [(1, 3); (1, 2); (2, 3); (2, 2)];;
#+END_SRC

*** Folds

#+BEGIN_SRC ocaml
List.fold_left ;;

List.fold_left ( + ) 0 [1; 2; 3] ;;

(* (+(+(+ 0 1) 2) 3) *)
#+END_SRC

The max function

#+BEGIN_SRC ocaml
max ;;

List.fold_left max min_int [2; 4; 6; 0; 1] ;;
#+END_SRC

The append and map functions using List.fold_right:

#+BEGIN_SRC ocaml
List.fold_right ;;

List.fold_right ( + ) [1; 2; 3] 0 ;;

(*  (+ 1 (+ 2(+ 3 0)))  *)

let append x y =
    List.fold_right (fun e a -> e :: a) x y;;

let map f l =
  List.fold_right (fun e a -> f e :: a) l [] ;;
#+END_SRC

See: https://github.com/hasura/graphql-engine/pull/2933#discussion_r328410592

List.concat to convert a list of lists into a list can be expensive,
since larger and larger items are passed to the @ operator as its
first argument:

#+BEGIN_SRC ocaml
let concat l = List.fold_left ( @ ) [] l ;;
#+END_SRC

More examples:

#+BEGIN_SRC ocaml
let length' l =
    List.fold_left (fun a _ -> a + 1) 0 l;; 

let rev' l =
    List.fold_left (fun a e -> e :: a) [] l;;

let split' l =
    List.fold_right
      (fun (x, y) (xs, ys) -> (x :: xs, y :: ys))
      l
      ([], []);;
#+END_SRC

** Lists and Tail Recursion

For longer lists, the length function may overflow the stack.

Use an accumulating parameter for the length tail-recursive function:

#+BEGIN_SRC ocaml
let rec length acc l =
    match l with
    | [] -> acc
    | _ :: t -> length (acc + 1) t;;

let l = length 0 [1; 2; 3] ;;
#+END_SRC

We can write a wrapper helper function:

#+BEGIN_SRC ocaml
let rec length_inner acc l =
    match l with
    | [] -> acc
    | _ :: t -> length_inner (acc + 1) t;;

let length l = length_inner 0 l;;
#+END_SRC

Or, all in one function:

#+BEGIN_SRC ocaml
let length l =
    let rec length_inner acc l =
      match l with
      | [] -> acc
      | _ :: t -> length_inner (acc + 1) t
    in
      length_inner 0 l;;
#+END_SRC

* 5. Loops and Recursions

Reference: https://ocaml.org/docs/loops-recursion

** For Loops and While Loops

Syntax of for loop:

#+BEGIN_SRC ocaml
for variable = start_value to end_value do
  expression
done

for variable = start_value downto end_value do
  expression
done
#+END_SRC

OCaml does not have break, continue or last statements.

You can throw an exception.

The for loop should evaluate and return unit.

#+BEGIN_SRC ocaml
for i = 1 to 10 do i done ;;
#+END_SRC

Syntax for while:

#+BEGIN_SRC ocaml
while boolean-condition do
  expression
done
#+END_SRC

You cannot break out of while, and while loops are second-class
citizens.

While loops can be used with references.

#+BEGIN_SRC ocaml
let quit_loop = ref false in
  while not !quit_loop do
    print_string "Have you had enough yet? (y/n) ";
    let str = read_line () in
      if str.[0] = 'y' then quit_loop := true
  done ;;
#+END_SRC

** Looping Over Lists

#+BEGIN_SRC ocaml
let my_list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] ;;

let f elem =
  Printf.printf "I am looking at element %d now\n" elem
in
  List.iter f my_list ;;

List.map (( * ) 2) my_list ;;
 #+END_SRC

#+BEGIN_SRC ocaml
let is_even i =
  i mod 2 = 0
in
  List.filter is_even my_list ;;
#+END_SRC

#+BEGIN_SRC ocaml
List.mem 12 my_list ;;
#+END_SRC

List.for_all and List.exists are the "forall" and "exist" operators in
predicate logic.

To operate on two lists, you have iter2, map2, for_all2, exists2 functions.

#+BEGIN_SRC ocaml
List.map2 (fun x y -> x + y) [1; 2; 3] [2; 3; 4] ;;
#+END_SRC

The map and filter functions operate on each individual list elements in isolation.

Fold is like "inserting an operator between each element of the list." 

For example, adding numbers in a list:

#+BEGIN_SRC ocaml
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 ;;
#+END_SRC

Sum of an empty list should be zero, instead of error.

Product of empty list should return one.

To handle left and right-associative operations based on parenthesis,
there are left and right fold operations.

List.fold_right is less efficient.

Define sum and product functions using List.fold_left for integer lists:

#+BEGIN_SRC ocaml
let sum = List.fold_left ( + ) 0 ;;

let product = List.fold_left ( * ) 1 ;;

sum my_list ;;

product my_list ;;
#+END_SRC

Factorial example:

#+BEGIN_SRC ocaml
let rec range a b =
    if a > b then []
    else a :: range (a + 1) b;;

let fact n = product (range 1 n) ;;

fact 10 ;;
#+END_SRC

** Looping Over Strings

String module has String.copy, String.iter functions and more.

** Recursion

Approach 1: Read entire file using really_input method.

This will not work with keyboard input, channels and sockets.

Approach 2: Use a while loop

Approach 3: Use recursion.

Approach 1 code example:

#+BEGIN_SRC ocaml
open Printf

let read_whole_chan chan =
  let len = in_channel_length chan in
  let result = (Bytes.create len) in
    really_input chan result 0 len;
    (Bytes.to_string result)

let read_whole_file filename =
  let chan = open_in filename in
    read_whole_chan chan

let main () =
  let filename = Sys.argv.(1) in
  let str = read_whole_file filename in
    printf "I read %d characters from %s\n" (String.length str) filename ;;
#+END_SRC

Approach 2 code example:

#+BEGIN_SRC ocaml
open Printf

let read_whole_chan chan =
  let buf = Buffer.create 4096 in
  try
    while true do
      let line = input_line chan in
        Buffer.add_string buf line;
        Buffer.add_char buf '\n'
    done;
    assert false (* This is never executed
	                (always raises Assert_failure). *)
  with
    End_of_file -> Buffer.contents buf

let read_whole_file filename =
  let chan = open_in filename in
    read_whole_chan chan

let main () =
  let filename = Sys.argv.(1) in
  let str = read_whole_file filename in
    printf "I read %d characters from %s\n" (String.length str) filename ;;
#+END_SRC

assert false has a polymorphic type, so it will unify with whatever value is returned by the with branch.

Approach 3 code example:
 
#+BEGIN_SRC ocaml
open Printf

let read_whole_chan chan =
  let buf = Buffer.create 4096 in
  let rec loop () =
    let line = input_line chan in
      Buffer.add_string buf line;
      Buffer.add_char buf '\n';
      loop ()
  in
    try loop () with
      End_of_file -> Buffer.contents buf

let read_whole_file filename =
  let chan = open_in filename in
    read_whole_chan chan

let main () =
  let filename = Sys.argv.(1) in
  let str = read_whole_file filename in
  printf "I read %d characters from %s\n" (String.length str) filename ;;
#+END_SRC

The compiler will turn the recursive loop int a real while loop, which
runs in constant stack space because of tail recursion and not cause
stack overflow.

Yes, we should close the channel:

#+BEGIN_SRC ocaml
...
    try loop () with
      End_of_file -> close_in chan; Buffer.contents buf
#+END_SRC

Recursion is great for constructing and examining certain types of
data structures, like trees:

TODO: Later in utop: readdir_no_ex, string_of_filesystem, loop, read_directory etc.

Recursion Example: Maximum Element in a List

#+BEGIN_SRC ocaml
let rec list_max xs =
  match xs with
  | [] -> failwith "list_max called on empty list"
  | [x] -> x
  | x :: remainder -> max x (list_max remainder) ;;

list_max [1; 2; 3; 4; 1] ;;

list_max [] ;;

list_max [5; 4; 3; 2; 1];;

list_max [5; 4; 3; 2; 1; 100] ;;
#+END_SRC

If you want, you can also formally prove that list_max is correct.

Tail Recursion

#+BEGIN_SRC ocaml
let rec range a b =
  if a > b then []
  else a :: range (a + 1) b ;;
#+END_SRC

Rewrite with:

#+BEGIN_SRC ocaml
let rec range a b =
  if a > b then [] else 
    let result = range (a + 1) b in
      a :: result ;;

List.length (range 1 10) ;;

List.length (range 1 1000000) ;;
#+END_SRC

range is not tail-recursive, and hence we can use an accumulator.

#+BEGIN_SRC ocaml

let rec range2 a b accum =
  if a > b then accum
  else range2 (a + 1) b (a :: accum) ;;

let range a b =
  List.rev (range2 a b []) ;;

List.length (range 1 1000000) ;;
#+END_SRC

The following implementation is twice as fast than the previous one
because it does not need to reverse a list:

** Mutable Records, References (Again!) and Arrays

OCaml records:

#+BEGIN_SRC ocaml
type pair_of_ints = {a : int; b : int} ;;

{a = 3; b = 5} ;;

{a = 3 } ;;
#+END_SRC

The record can have a mutable field.

#+BEGIN_SRC ocaml
type name = {name : string; mutable access_count : int} ;;

let print_name name =
  print_endline ("The name is " ^ name.name);
  name.access_count <- name.access_count + 1 ;;

let n = {name = "Richard Jones"; access_count = 0} ;;

n ;;

print_name n ;;

n ;;

print_name n ;;

n ;;

n.name <- "John Smith" ;;
#+END_SRC

References are implemented using records with a mutable contents field.

The definition at https://v2.ocaml.org/api/Stdlib.html#1_References.

#+BEGIN_SRC ocaml
let r = ref 100 ;;
#+END_SRC

Arrays are another mutable structure.

In OCaml, lists are implemented using linked lists and they can be
slow to find the nth element or random access (because of iterating
over a list).

The OCaml Array is a real array.

TODO: Array in utop.

** Mutually Recursive Functions

If we want two functions that call each other:

#+BEGIN_SRC ocaml
let rec even n =
  match n with
  | 0 -> true
  | x -> odd (x - 1) ;;
#+END_SRC

#+BEGIN_SRC ocaml
let rec even n =
  match n with
  | 0 -> true
  | x -> odd (x - 1) ;;

let rec odd n =
  match n with
  | 0 -> false
  | x -> even (x - 1);;
#+END_SRC

No "forward prototypes" in OCaml (as seen in C). Use a special syntax:

#+BEGIN_SRC ocaml
 let rec even n =
    match n with
    | 0 -> true
    | x -> odd (x - 1)
  and odd n =
    match n with
    | 0 -> false
    | x -> even (x - 1)  ;;

even 4 ;;
odd 3 ;;

even 5 ;;
odd 6 ;;
#+END_SRC

You can write mutually recursive class definitions and modules.

* 6. Opam Install

Reference: https://ocaml.org/install

Install opam

#+BEGIN_SRC sh
$ bash -c "sh <(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"
#+END_SRC

Review: https://ocaml.org/docs/installing-ocaml

Initialise switch

#+BEGIN_SRC sh
$ which opam
$ opam switch

$ opam init
#+END_SRC

Evaluate environment

#+BEGIN_SRC sh
$ eval $(opam env --switch=default)
#+END_SRC

#+BEGIN_SRC sh
$ opam switch
#+END_SRC

#+BEGIN_SRC sh
$ opam list
#+END_SRC

Install OCaml platform tools:

#+BEGIN_SRC sh
$ opam install ocaml-lsp-server odoc ocamlformat utop
#+END_SRC

#+BEGIN_SRC sh
$ opam list
#+END_SRC

Verify utop

#+BEGIN_SRC sh
$ utop
#+END_SRC

Note:
   * for Emacs, add these lines to ~/.emacs:
     (add-to-list 'load-path "/home/shakthi/.opam/default/share/emacs/site-lisp")
     (require 'ocp-indent)

Test read_line () in utop:

#+BEGIN_SRC sh
read_line ;;

read_line () ;;
#+END_SRC

To delete:

#+BEGIN_SRC sh
$ rm -rf .opam
$ rm /usr/local/bin/opam
#+END_SRC

* 7. Introduction to Opam Switches

Reference: https://ocaml.org/docs/opam-switch-introduction

List switches:

#+BEGIN_SRC sh
$ opam switch list
#+END_SRC

Help:

#+BEGIN_SRC sh
$ opam switch --help
#+END_SRC

List available switches

#+BEGIN_SRC sh
$ opam switch list-available
#+END_SRC

Create a new switch:

#+BEGIN_SRC sh
$ opam switch create 4.14 4.14.2
#+END_SRC

Change to a specific switch:

#+BEGIN_SRC sh
$ opam switch 4.14
#+END_SRC

Confirm the switch:

#+BEGIN_SRC sh
$ opam switch
#+END_SRC

#+BEGIN_SRC sh
$ opam list
#+END_SRC

See ~/.opam/4.14 and ~/.opam/default.
* 8. Your First OCaml Program

** Compiling OCaml Programs

OCaml comes with two compilers: one translating sources into native
binaries and another turning sources into a bytecode format.

OCaml also comes with an interpreter for that bytecode format. 

#+BEGIN_SRC sh
$ opam list | grep dune
$ opam exec -- dune init proj hello
#+END_SRC

If already ran eval $(opam env), omit "opam exec --" command.

#+BEGIN_SRC sh
$ dune init proj hello
#+END_SRC

Install tree command to list files and directories:

#+BEGIN_SRC sh
$ sudo apt install tree
#+END_SRC

#+BEGIN_SRC sh
$ cd hello
$ tree
#+END_SRC

bin: executable programs
lib: libraries
test: tests

Dune can be used for:
- running tests
- generate documentation
- produce packaging metadata
- create arbitrary files

The _build folder is where Dune stores all the files it generates.

Build:

#+BEGIN_SRC sh
$ opam exec -- dune build
#+END_SRC

Execute:

#+BEGIN_SRC sh
$ opam exec -- dune exec hello
#+END_SRC

** Watch Mode

#+BEGIN_SRC sh
$ opam exec -- dune build -w

OR

$ opam exec -- dune exec hello -w
#+END_SRC

** Why Isn't There a Main Function?

There is no requirement that a project must contain a file with that
name in order to produce an executable.

An executable OCaml file's entry point is its first line.

Statements are just processed in order from top to bottom, each triggering the side effects it may have. 

Definitions are added to the environment. 

A common practice to single out a value that triggers all the side effects and mark it as the intended main entry point. 

In OCaml, that's the role of "let () =".

** Modules and the Standard Library

A module is a collection of named values.

Identical names from distinct modules don't clash.

The standard library is collection of several modules.

Try printf from the Printf module in bin/main.ml as fellows:

#+BEGIN_SRC sh
let () = Printf.printf "%s\n" "Hello, World!"
#+END_SRC

** Every File Defines a Module

Each OCaml file defines a module, once compiled.

References to external moduls create dependencies.

Circular dependencies between modules are not allowed.

To create a module, write a new file lib/en.ml:

#+BEGIN_SRC sh
let v = "Hello, world!"
#+END_SRC

Update bin/main.ml:

#+BEGIN_SRC sh
let () = Printf.printf "%s\n" Hello.En.v
#+END_SRC

Execute:

#+BEGIN_SRC sh
opam exec -- dune exec hello
#+END_SRC

Interactive session using utop

#+BEGIN_SRC sh
$ opam exec -- dune utop
#+END_SRC

#+BEGIN_SRC sh
utop # #show Hello.En ;;
module En : sig val v : string end

utop # #quit ;;
#+END_SRC

If you add a file named hello.ml in the lib folder, Dune will consider
this the whole Hello module and it will make En unreachable.

If you want your module En to be visible, you need to add this in your hello.ml file:

#+BEGIN_SRC sh
module En = En
#+END_SRC

** Defining Module Interfaces

UTop's #show command displays an API: the list of definitions provided
by a module.

In OCaml, this is called a modular interface.

An .ml file defines a module.

An .mli file defines a module interface. It must have the same base
name as the module file.

Example: en.mli is the module interface for module en.ml

Create lib/en.mli:

#+BEGIN_SRC sh
val v : string
#+END_SRC

Only the declarations between sig and end from #show output are written.

Module interfaces are also used to create private definitions.

A module definition is private if it is not listed in its
correspending module interface.

Update lib/en.ml:

#+BEGIN_SRC sh
let hello = "Hello"
let v = hello ^ ", world!"
#+END_SRC

Update bin/main.ml

#+BEGIN_SRC sh
let hello = "Hello"
let v = hello ^ ", world!"
#+END_SRC

Try compiling:

#+BEGIN_SRC sh
$ opam exec -- dune exec hello
#+END_SRC

This is because we have not changed lib/en.mli.

"hello" is not there in en.mli and it is private.

** Defining Multiple Modules in a Library

Multiple modules in a single library.

Create lib/es.ml:

#+BEGIN_SRC sh
let v = "¡Hola, mundo!"
#+END_SRC

Update bin/main.ml

#+BEGIN_SRC sh
let () = Printf.printf "%s\n" Hello.Es.v
let () = Printf.printf "%s\n" Hello.En.v
#+END_SRC

Execute:

#+BEGIN_SRC sh
$ opam exec -- dune exec hello
#+END_SRC

** Installing and Using Modules from a Package

#+BEGIN_SRC sh
$ opam install dream

$ opam show -f version dream
#+END_SRC

Update bin/main.ml

#+BEGIN_SRC sh
let () = Dream.(run (router [ get "/" (fun (_ : request) -> html Hello.En.v) ]))
#+END_SRC

It responds to HTTP '/' requests with the content of Hello.En.v

Update bin/dune to include the dream library:

#+BEGIN_SRC sh
(executable
 (public_name hello)
 (name main)
 (libraries hello dream))
#+END_SRC

Launch the server:

#+BEGIN_SRC sh
$ opam exec -- dune exec hello
#+END_SRC

Test:

#+BEGIN_SRC sh
$ curl localhost:8080
#+END_SRC

** Using the Preprocessor to Generate Code

We want to display the output as a list of strings.

#+BEGIN_SRC sh
$ opam install ppx_show
#+END_SRC

Update lib/dune:

#+BEGIN_SRC sh
(library
 (name hello)
 (preprocess (pps ppx_show))
 (libraries ppx_show.runtime))
#+END_SRC

Update lib/en.mli:

#+BEGIN_SRC sh
val string_of_string_list : string list -> string
val v : string list
#+END_SRC

Update lib/en.ml:

#+BEGIN_SRC sh
let string_list_pp = [%show: string list]

let string_of_string_list = Format.asprintf "@[%a@]" string_list_pp

let v = String.split_on_char ' ' "Hello using an opam library"
#+END_SRC

v has the type string list. We're using String.split_on_char to turn a
string into a string list by splitting the string on space characters.

string_of_string_list has type string list -> string. This converts a
list of strings into a string, applying the expected formatting.

string_list_pp has type Format.formatter -> string list -> unit, which
means it is a custom formatter that turns a string list into a string

Edit bin/main.ml:

#+BEGIN_SRC sh
let () = print_endline Hello.En.(string_of_string_list v)
#+END_SRC

Execute:

#+BEGIN_SRC sh
$ opam exec -- dune exec hello
#+END_SRC

** Minimum setup

#+BEGIN_SRC sh
$ opam list | grep dune

$ mkdir minimo
$ cd minimo
$ touch dune-project dune minimo.ml
#+END_SRC

dune-project:

#+BEGIN_SRC ocaml
(lang dune 3.14)
#+END_SRC

dune

#+BEGIN_SRC ocaml
(executable (name minimo))
#+END_SRC

minimo.ml

#+BEGIN_SRC ocaml
let () = print_endline "My name is Minimo"
#+END_SRC

Note: minimo.exe is not a file name.

This is how Dune is told to compile the minimo.ml file.

An empty file is valid OCaml syntax.

* 9. utop and IO

A Tour of OCaml

#+BEGIN_SRC ocaml
utop> read_line ;;

utop> read_line () ;;
#+END_SRC

Loops and Recursion

#+BEGIN_SRC ocaml
utop # let quit_loop = ref false in
         while not !quit_loop do
           print_string "Have you had enough yet? (y/n) ";
           let str = read_line () in
             if str.[0] = 'y' then quit_loop := true
         done ;;
Have you had enough yet? (y/n) n
Have you had enough yet? (y/n) n
Have you had enough yet? (y/n) n
Have you had enough yet? (y/n) y
- : unit = ()
#+END_SRC

Note: Use Ctrl + l to clear utop output.

Recursion 
Approach 1

#+BEGIN_SRC ocaml
utop # let read_whole_chan chan =
         let len = in_channel_length chan in
         let result = (Bytes.create len) in
           really_input chan result 0 len;
           (Bytes.to_string result) ;;
val read_whole_chan : in_channel -> string = <fun>

utop # let read_whole_file filename =
         let chan = open_in filename in
           read_whole_chan chan ;;
val read_whole_file : string -> string = <fun>

utop # let main () =
         let filename = "/etc/resolv.conf" in
         let str = read_whole_file filename in
           printf "I read %d characters from %s\n" (String.length str) filename ;;
val main : unit -> unit = <fun>

utop # main () ;;
I read 920 characters from /etc/resolv.conf
- : unit = ()
#+END_SRC

Approach 2

#+BEGIN_SRC ocaml
utop # let read_whole_chan chan =
         let buf = Buffer.create 4096 in
         try
           while true do
             let line = input_line chan in
               Buffer.add_string buf line;
               Buffer.add_char buf '\n'
           done;
           assert false
         with
           End_of_file -> Buffer.contents buf ;;
val read_whole_chan : in_channel -> string = <fun>

utop # main () ;;
I read 920 characters from /etc/resolv.conf
- : unit = ()
#+END_SRC

Approach 3

#+BEGIN_SRC ocaml
utop # let read_whole_chan chan =
         let buf = Buffer.create 4096 in
         let rec loop () =
           let line = input_line chan in
              Buffer.add_string buf line;
              Buffer.add_char buf '\n';
              loop ()
         in
           try loop () with
             End_of_file -> Buffer.contents buf ;;
val read_whole_chan : in_channel -> string = <fun>

utop # main () ;;
I read 920 characters from /etc/resolv.conf
- : unit = ()
#+END_SRC

#+BEGIN_SRC ocaml
utop # type filesystem = File of string | Directory of filesystem list ;;
type filesystem = File of string | Directory of filesystem list

utop # #use "topfind" ;;
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
utop # #require "unix" ;;

utop # open Unix ;;

utop # let readdir_no_ex dirh =
       try
         Some (readdir dirh)
       with
         End_of_file -> None ;;
val readdir_no_ex : dir_handle -> string option = <fun>

utop # readdir_no_ex ;;
- : dir_handle -> string option = <fun>

utop # let rec string_of_filesystem fs =
       match fs with
       | File filename -> filename ^ "\n"
       | Directory fs_list ->
           List.fold_left (^) "" (List.map string_of_filesystem fs_list) ;;
val string_of_filesystem : filesystem -> string = <fun>

utop # let rec read_directory path =
       let dirh = opendir path in
       let rec loop () =
         let filename = readdir_no_ex dirh in
           match filename with
           | None -> []
           | Some "." -> loop ()
           | Some ".." -> loop ()
           | Some filename ->
               let pathname = path ^ "/" ^ filename in
               let stat = lstat pathname in
               let this =
                 if stat.st_kind = S_DIR then
                   read_directory pathname
                 else
                   File pathname
               in
                 this :: loop ()
       in
         Directory (loop ()) ;;
val read_directory : string -> filesystem = <fun>

utop # read_directory "~" ;;
Exception: Unix.Unix_error(Unix.ENOENT, "opendir", "~")

utop # read_directory "/etc" ;;
Exception: Unix.Unix_error(Unix.EACCES, "opendir", "/etc/cups/ssl")

utop # read_directory "/home/shakthi/code/twitch" ;;

#+END_SRC

Array

#+BEGIN_SRC ocaml
utop # #use "topfind" ;;

utop # #require "base" ;;

utop # open Base ;;

utop # open Array ;;

utop # let a = Array.create 10 0 ;;
Line 1, characters 8-20:
Warning 6 [labels-omitted]: label len was omitted in the application of this function.

val a : int/2 array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]

utop # for i = 0 to Array.length a - 1 do
         a.(i) <- i
       done ;;
- : unit/2 = ()

utop # a ;;
- : int/2 array = [|0; 1; 2; 3; 4; 5; 6; 7; 8; 9|]
#+END_SRC

Matrix Multiplication

#+BEGIN_SRC ocaml

utop # #use "topfind" ;;
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()

utop # #require "stdio" ;;

utop # open Stdio;;

utop # let size = 30 ;;
val size : int/2 = 30

utop # let mkmatrix rows cols =
       let count = ref 1
       and last_col = cols - 1
       and m = Array.make_matrix rows cols 0 in
         for i = 0 to rows - 1 do
           let mi = m.(i) in
             for j = 0 to last_col do
               mi.(j) <- !count;
               incr count
             done;
         done;
         m ;;

Line 4, characters 15-32:
Warning 6 [labels-omitted]: labels dimx, dimy were omitted in the application of this function.

Line 9, characters 15-19:
Alert deprecated: Base.incr
[2016-09] this element comes from the stdlib distributed with OCaml.
Use [Int.incr] instead.

val mkmatrix : int -> int -> int/2 array array = <fun>

utop # let rec inner_loop k v m1i m2 j =
       if k < 0 then v
       else inner_loop (k - 1) (v + m1i.(k) * m2.(k).(j)) m1i m2 j ;;
val inner_loop : int -> int -> int array -> int array array -> int/2 -> int =
  <fun>

utop # let mmult rows cols m1 m2 m3 =
       let last_col = cols - 1
       and last_row = rows - 1 in
         for i = 0 to last_row do
           let m1i = m1.(i) and m3i = m3.(i) in
           for j = 0 to last_col do
             m3i.(j) <- inner_loop last_row 0 m1i m2 j
           done;
         done ;;
val mmult :
  int -> int -> int array array -> int array array -> int array array -> unit/2 =
  <fun>

let () =
  let n =
    try int_of_string Sys.argv.(1)
    with Invalid_argument _ -> 1
  and m1 = mkmatrix size size
  and m2 = mkmatrix size size
  and m3 = Array.make_matrix size size 0 in
    for i = 1 to n - 1 do
      mmult size size m1 m2 m3
    done;
    mmult size size m1 m2 m3;
    Printf.printf "%d %d %d %d\n" m3.(0).(0) m3.(2).(3) m3.(3).(2) m3.(4).(4);;
#+END_SRC
